#########################################################################
################ Anotações - Projeto: Be The Hero #######################
#########################################################################
Dia 01 <-----------------PREPARANDO-O-AMBIENTE---------------------------
#########################################################################
1. Instalação
	1.1 Chocolatey (cmd)
	1.2 Node.js (Ferramenta backend)

1.3 Visual Studio Code
	1.3.1 Dracula Theme (Ferramenta VSCode)
	1.3.2 Material Icon Theme (Ferramenta VSCode)

2. Usando o Node.js
	2.1 npm init -y (Configuração Node.js)
	2.2 npm install express (Instalando o Express)
	2.3 new index.js (configuração da port:3333)

4. Conhecendo o React
	4.1 npx create-react-app frontend (Criando o projeto front end)
	4.2 npm start (Testando o aplicativo)

5. Conceito sobre React Native
	5.1 JavaScript Core (Código único)

6. Explicando o Expo
	6.1 Ações da lib 
	6.2 Usando somente JS
#########################################################################
Dia 02 <-------------------ELABORANDO-O-BACKEND--------------------------
#########################################################################
1. Requisições com GET/POST
	1.1 Métodos de Requisições (GET, POST, PUT, DELETE)
	1.2 Instalação do Insomnia
	1.3 Testando as rotas com o Insomnia

2. Parâmetros
	2.1 Queries Parms (Usados para paginação e filtros)
	2.2 Route Parms (Usado para identificar recursos)
	2.3 Request Body (Colhendo informações com JSON)

3. Nodemon
	3.1 npm install nodemon -D (Instalação)
	3.2 Reset automático do index.js (npm start)

4. Banco de dados
	4.1 Instalando o Knex e SQLite
	4.2 npm install knex / npm install sqlite3 
	4.3 knexfile (Setando os endereços)

5. Análise de recursos 
	5.1 Entidades 
	5.2 Funcionalidades

6. Criando as tabelas SQLite
	6.1 npx knex migrate:make create_(table_name) 
	6.2 npx migrate:latest (Criação do BD)

7.Controladores (MVC)
	7.1 OngController
	7.2 IncidentController 
	7.3 ProfileController 
	7.4 SessionController
#########################################################################
Day 03 <--------------------ELABORANDO-O-FRONTEND------------------------
#########################################################################
1. Limpando o projeto do frontend
	1.1 Apagando arquivos não utilizados
	1.2 Estrutura de funcionamento do React (npm start)
	1.2.1 (index.js --> App.js --> Header.js)

2. Conceitos do React
	2.1 Componente = função que retorna um html (JSX) 
	2.2 Propriedades = conteúdo modificado atravès de injeção(js)
	2.2.1 Desestruturação de propriedade (Código mais claro)
	2.3 Estado modificado = Usando o {useState}

3. Configurações de HTML, CSS e Emmet
	3.1 index.js e style.css (por página)
	3.2 global.css (imports, reset e default)
	3.3 Habilitando atalhos com emmet (settings.json)

4. Criando Página de Login
	4.1 Importando imagens
	4.2 Elaboração de formulário
	4.3 Importando Icons (Feather Icons + React)
	4.4 Estilizando a página (Estruturas form/section/h1/a/svg)

5. Configurações de rotas
	5.1 npm react-router-dom (instalação)
	5.2 Importação (BrowserRouter, Router, Switch)
	5.3 Setando a rota para página inicial (Imports)
	5.4 Propriedade 'exact' para página inicial
	5.5 usando 'Link' do react para acelerar a página

6. Criando Página de Cadastro de ONGs
	6.1 aproveitamento de CSS
	6.2 Criando HTML
	6.3 Estilizando a página
	6.4 Aprendendo sobre style e (input + input)

7. Criando Página de Perfil
	7.1 Criando HTML
	7.2 Estilizando a página (posicionamento de elementos)
	7.3 utilizando :not(:first-child)

8. Criando Página de Cadastro de Casos
	8.1 Copiando HTML e CSS da pagina de Cadastro de ONGs
	8.2 Consertando reajustando CSS
	8.3 Verificando LINKs

9. Conectando o Front-end e o Back-end
	9.1 npm install axios (npm start)
	9.2 configurando páginas (recepção de valores de cadastro)
	9.3 testando (utlização de async-await nas functions)
	9.4 Usando useState e useHistory
	9.5 Preenchendo formulário dinamicamente (.map)
	9.6 Formatando com INTL
	9.7 Criando a função HandleDelete
	9.8 Criando a função HandleLogout
	9.9 Criando a função HandleNewIncidents
#########################################################################
Day 04 <-----------------PROJETO-NO-REACT-NATIVE-------------------------
#########################################################################
1. Instalação
	1.1 npm install -g expo-cli
	1.2 expo -h (verificando instalação)
	1.3 expo init (nome_do_projeto)

2. Execução do projeto
	2.1 npm start (pasta mobile)
	2.2 expo app (Android) - QRCode

3. Comparação da estrutura do projeto
	3.1 <view> / <text> (padrão)
	3.2 style diferenciado {StyleSheet}
	3.3 flexbox = display: flex (padrão)
	3.4 Propriedades sem hífen: background-color = backgroundColor.
	3.5 Herança de estilos: "Não existem no React Native"
	3.6 Estilização própria para cada elemento

4. Iniciando mudanças no projeto
	4.1 Ícone e splash-screen
	4.2 configurando navegação (instalação do react-navigator)
	4.3 Setando a rota

5. Criando HTML e CSS (Incidents)
	5.1 Estrutura do projeto (HTML)
	5.2 Aplicando o CSS
	5.3 TouchableOpacity (onPress + Arrow Function)	
	5.4 Aplicando CSS nos CASOS
	5.5 Projeção de casos dinamicamente (FlatList/data/renderItem)
	5.6 Setando botão para próxima página

6. Criando HTML e CSS (Detail)
	6.1 Estrutura do projeto (HTML)
	6.2 Reaproveitando CSS do Incidents
	6.3 Setando botão goBack
	6.4 Configurando de E-mail (expo-mail-composer)
	6.5 Configuração de Whatsapp (deep-Linking-react)

7. Conectando app ao backend
	7.1 Startando o node pra verificar a conexão e Banco de dados
	7.2 Criando variáveis que recebem os valores no app
	7.3 Usando INTL pra configurar o valor da doação
	7.4 configurando mensagem de e-mail e whatsapp
	7.5 criando scroll infinito (onEndReached/onEndReachedThreshold)
#########################################################################
Day 05 <----------------FUNCIONALIDADES-AVANÇADAS------------------------
#########################################################################
1. Validações 
	1.1 Biblioteca Celebrate/Joi no Express
	1.2 Validação primeiro/ Inserção de dados depois
	1.3 Validação de [QUERY, BODY E HEADERS]

2. Testes 
	2.1 Motivos para fazer os testes
	2.2 TDD (Test Driven Delepoment)

3.Fazendo testes em nossa aplicação (Jest)
	3.1 Tipos de teste (Únitário, Integração) 
	3.1.1 Teste únitário (Testa funcionalidades isoladas da app)
	3.1.2 Instalação o Jest (npm install --jest)
	3.2 Teste de Integração (Fluxo, rota)
	3.2.1 Instalação do cross-env (npm install cross-env
	3.2.2 Instalação do supertest (npm install supertest)

3. Deploy 
	3.1 Heroku.com (Teste de aplicações - Free Version)
	3.2 DigitalOcean (Prático e valor viável)
	3.3 Netlify (Específico para front-end)

4. Estudos
	4.1 Padrão de código: ESLint, Prettier
	4.2 Autenticação JWT
	4.3 Styled Components

5. Apresentação do projeto
	5.1 Github
	5.2 Linkedin
#########################################################################
